{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["emojiDictionary","emojisWeHave","Object","keys","App","useState","meaning","setMeaning","className","style","backgroundColor","opacity","width","margin","onChange","event","userEmojiInput","target","value","undefined","placeholder","map","emoji","onClick","emojiClickHandler","fontSize","padding","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAGIA,EAAkB,CACpB,eACE,sGACF,eAAM,iBACN,eACE,yFACF,eAAM,WACN,eAAM,SACN,eAAM,oCACN,eAAM,YACN,eAAM,eACN,eAAM,sDACN,eAAM,UACN,eAAM,WACN,eAAM,OACN,eAAM,UACN,eAAM,UACN,eAAM,6CACN,eAAM,YACN,eAAM,eACN,eAAM,YACN,eAAM,aACN,eAAM,OACN,eAAM,eACN,eACE,4GACF,eAAM,YACN,eAAM,QACN,eAAM,WACN,eAAM,iBACN,eAAM,UACN,eAAM,MACN,eAAM,YAGJC,EAAeC,OAAOC,KAAKH,GAkEhBI,MAjEf,WACE,IAAI,EAAwBC,mBAAS,IAArC,mBAAKC,EAAL,KAAcC,EAAd,KAgBA,OACE,sBAAKC,UAAU,MAAf,UACE,uBACA,qBACEC,MAAO,CACLC,gBAAiB,OACjBC,QAAS,MACTC,MAAO,MACPC,OAAQ,UALZ,sBAQW,uBARX,4BAWA,uBACA,uBACEL,UAAU,aACVM,SAhCN,SAA2BC,GACzB,IAAIC,EAAiBD,EAAME,OAAOC,MAC9BZ,EAAUN,EAAgBgB,QAEdG,IAAZb,IACFA,EAAU,8CAEZC,EAAWD,IA0BPc,YAAY,wBAEd,4DACA,8BAAId,EAAJ,OACA,sBAAKE,UAAU,aAAf,UACE,4CAEE,+BACGP,EAAaoB,KAAI,SAAUC,GAC1B,OACE,sBACEC,QAAS,kBAlCzB,SAA2BD,GAEzBf,EADcP,EAAgBsB,IAiCDE,CAAkBF,IAEjCb,MAAO,CACLgB,SAAU,SACVC,QAAS,MACTC,OAAQ,WANZ,SASGL,GAPIA,eC1ERM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.480fe25b.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nvar emojiDictionary = {\n  \"ü•ê\":\n    \"Croissant: A French crescent-shaped roll made of sweet flaky yeast dough, usually had for breakfast\",\n  \"ü•ñ\": \"Baguette Bread\",\n  \"ü•®\":\n    \"Pretzel: A crisp biscuit baked in the form of a knot or stick and flavoured with salt.\",\n  \"ü•û\": \"Pancakes\",\n  \"üßá\": \"Waffle\",\n  \"ü•ì\": \"Bacon: A type of salt-cured pork \",\n  \"üçî\": \"Hamburger\",\n  \"üçü\": \"French Fries\",\n  \"üçï\": \"Does this dish even need a meaning? It's Pizzzaaahh\",\n  \"üå≠\": \"Hot Dog\",\n  \"ü•™\": \"Sandwich\",\n  \"üåÆ\": \"Taco\",\n  \"üåØ\": \"Burrito\",\n  \"üßÜ\": \"Falafel\",\n  \"ü•ó\": \"Here's to something HEALTHY! A Green Salad\",\n  \"üç±\": \"Bento Box\",\n  \"üçò\": \"Rice Cracker\",\n  \"üçô\": \"Rice Ball\",\n  \"üçõ\": \"Curry Rice\",\n  \"üç¢\": \"Oden\",\n  \"üç§\": \"Fried Shrimp\",\n  \"üç•\":\n    \"Naruto: A ridged fishcake of processed whitefish with an iconic pink swirl, often served in ramen or oden\",\n  \"ü•Æ\": \"Moon Cake\",\n  \"üç°\": \"Dango\",\n  \"ü•ü\": \"Dumpling\",\n  \"ü•†\": \"Fortune Cookie\",\n  \"üçÆ\": \"Custard\",\n  \"ü•ß\": \"Pie\",\n  \"üç©\": \"Doughnut\"\n};\n\nvar emojisWeHave = Object.keys(emojiDictionary);\nfunction App() {\n  var [meaning, setMeaning] = useState(\"\");\n  function emojiInputHandler(event) {\n    var userEmojiInput = event.target.value;\n    var meaning = emojiDictionary[userEmojiInput];\n\n    if (meaning === undefined)\n      meaning = \"We don't have this currently in our pantry\";\n\n    setMeaning(meaning);\n  }\n\n  function emojiClickHandler(emoji) {\n    var meaning = emojiDictionary[emoji];\n    setMeaning(meaning);\n  }\n\n  return (\n    <div className=\"App\">\n      <br />\n      <h1\n        style={{\n          backgroundColor: \"pink\",\n          opacity: \"0.8\",\n          width: \"50%\",\n          margin: \"0 auto\"\n        }}\n      >\n        Nom Nom! <br />\n        Food Emoji Interpreter\n      </h1>\n      <br />\n      <input\n        className=\"text-field\"\n        onChange={emojiInputHandler}\n        placeholder=\"Enter an emoji here\"\n      />\n      <h2>What's this on the menu!? </h2>\n      <p>{meaning} </p>\n      <div className=\"menu-space\">\n        <h4> Our Menu </h4>\n        {\n          <span>\n            {emojisWeHave.map(function (emoji) {\n              return (\n                <span\n                  onClick={() => emojiClickHandler(emoji)}\n                  key={emoji}\n                  style={{\n                    fontSize: \"1.5rem\",\n                    padding: \".9%\",\n                    cursor: \"pointer\"\n                  }}\n                >\n                  {emoji}\n                </span>\n              );\n            })}\n          </span>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}